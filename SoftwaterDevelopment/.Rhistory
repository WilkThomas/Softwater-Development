shiny::runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
data <- read.csv("USGSPWDBv2.3n.csv")
runApp()
library(shiny)
library(gglot2)
library(ggplot2)
library(dplyr)
runApp()
test <- subset(data, BASIN == 'Permian', c("BASIN", "TDS", "DATESAMPLE"))
View(test)
test$DATESAMPLE <- format(as.Date(test$DATESAMPLE, format = "%Y/%m/%d"), %Y)
format(as.Date(test$DATESAMPLE, format = "%Y/%m/%d"), %Y)
format(as.Date(test$DATESAMPLE, format="%Y/%m/%d"), %Y)
test <- format(as.Date(test$DATESAMPLE, format="%Y/%m/%d"), %Y)
test$DATESAMPLE <- as.numeric(format(test$DATESAMPLE, '%Y'))
head(test)
str(test)
test$DATESAMPLE <- format(as.Date(test$DATESAMPLE), '%Y-%m-%d')
test$DATESAMPLE <- format(as.Date(test$DATESAMPLE), '%Y-%m-%d', '%Y')
test$DATESAMPLE <- format(as.Date(test$DATESAMPLE, '%Y-%m-%d'), '%Y')
final <- test[complete.cases(test),]
View(final)
final <- final[order(DATESAMPLE),]
final <- final[order(final$DATESAMPLE),]
final <- final[, sum(TDS), by = DATESAMPLE]
final <- final[, sum(final$TDS), by = final$DATESAMPLE]
final <- aggregate(final['TDS'], by=final['DATESAMPLE'], sum)
ggplot(final)
ggplot(final) + barplot()
ggplot(final, aes(DATESAMPLE, TDS)) + barplot()
ggplot2.barplot(data = final)
library(devtools)
install.packages('devtools')
install.packages("devtools")
library(devtools)
library(easyGgplot2)
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col()
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_bar()
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS")
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS") + scale_x_continuous(name = "TDS", limits = c(0, 500,000))
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS") + scale_y_continuous(limits = c(0, 1000))
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS") + scale_y_continuous(limits = c(0, 100000))
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS") + scale_y_continuous(limits = c(0, 500000))
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS")
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS") + scale_x_continuous(limits = c(1905, 1955))
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col() + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS")
ggplot(data = final, aes(x = DATESAMPLE, y = TDS)) + geom_col(fill = "dark blue") + ggtitle("Permian Basin") + xlab("Year") + ylab("TDS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test <- data %>% filter(BASIN == 'Permian') %>% filter(DATESAMPLE %in% 2000, 2014)
test <- data %>% filter(BASIN == 'Permian') %>% filter(DATESAMPLE %in% c(2000, 2014))
View(test)
test <- data %>% filter(BASIN == Permian)
install.packages(dplyr)
library(tidyverse)
test <- data %>% filter(BASIN == Permian)
test <- data %>% filter(BASIN == 'Permian')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
date_list <- list(test$DATESAMPLE)
runApp()
test$DATESAMPLE <- format(as.Date(test$DATESAMPLE, '%Y-%m-%d'), '%Y')
date_list <- list(test$DATESAMPLE)
filtered <- aggregate(input$select_query, FUN = sum, by = date_list)
filtered <- aggregate(TDS, FUN = sum, by = date_list)
filtered <- aggregate(filtered$TDS, FUN = sum, by = date_list)
filtered <- aggregate(test$TDS, FUN = sum, by = date_list)
View(filtered)
View(filtered)
View(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(filtered)
runApp()
colnames(filtered)
columns <- colnames(filtered)
columns[,2]
columns[,1]
columns[2,]
columns[2]
y-value <- columns[2]
y <- columns[2]
y
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
shiny::runApp()
runApp()
runApp()
runApp()
#This is the user interface layout
ui <- fluidPage(
#A selector bar to browse through themes
shinythemes::themeSelector(),
titlePanel("Water Quality"),
sidebarLayout(
side, main)
)
#Output functions
server <- function(input, output) {
output$basin_label <- renderText({
input$select_basin
})
output$query_label <- renderText ({
input$select_query
})
#Reactive function to dynamically update years and pass to the filter
slider_years <- reactive({
seq(input[['my_dates']][1],
input[['my_dates']][2])
})
#Create a plot based on user inputs
output[['basin_table']] <- renderPrint({
req(input$select_basin)
#Format the date column as a date object and extract year only
data$DATESAMPLE <- format(as.Date(data$DATESAMPLE, '%Y-%m-%d'), '%Y')
#Create a subset of the data based on user selections
filtered <-
data %>%
filter(BASIN ==input[['select_basin']]) %>%
filter(DATESAMPLE %in% slider_years())
filtered <-
subset(filtered,
BASIN == input[['select_basin']],
c("BASIN", input[['select_query']], "DATESAMPLE"
))
#Eliminate rows with null values from the data
filtered <- filtered[complete.cases(filtered),]
filtered <- filtered[order(filtered$DATESAMPLE),]
#Create a list for the aggregate function
date_list <- list(filtered$DATESAMPLE)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = avg, by = date_list)
names(filtered)[2] <- 'y_value'
ggplot(data = filtered, aes(x = Group.1, y = y_value)) + geom_col(fill = '#0066CC') + xlab("Year") + ylab("TDS")
})
}
source('~/.active-rstudio-document')
#Output functions
server <- function(input, output) {
output$basin_label <- renderText({
input$select_basin
})
output$query_label <- renderText ({
input$select_query
})
#Reactive function to dynamically update years and pass to the filter
slider_years <- reactive({
seq(input[['my_dates']][1],
input[['my_dates']][2])
})
#Create a plot based on user inputs
output[['basin_table']] <- renderPrint({
req(input$select_basin)
#Format the date column as a date object and extract year only
data$DATESAMPLE <- format(as.Date(data$DATESAMPLE, '%Y-%m-%d'), '%Y')
#Create a subset of the data based on user selections
filtered <-
data %>%
filter(BASIN ==input[['select_basin']]) %>%
filter(DATESAMPLE %in% slider_years())
filtered <-
subset(filtered,
BASIN == input[['select_basin']],
c("BASIN", input[['select_query']], "DATESAMPLE"
))
#Eliminate rows with null values from the data
filtered <- filtered[complete.cases(filtered),]
filtered <- filtered[order(filtered$DATESAMPLE),]
#Create a list for the aggregate function
date_list <- list(filtered$DATESAMPLE)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = avg, by = date_list)
names(filtered)[2] <- 'y_value'
ggplot(data = filtered, aes(x = Group.1, y = y_value)) + geom_col(fill = '#0066CC') + xlab("Year") + ylab("TDS")
})
}
#Starts the application
shinyApp(ui = ui, server = server)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = sum, by = date_list)
names(filtered)[2] <- 'y_value'
runApp()
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output$hist <- renderPlot({ hist(rv$data)
}) }
shinyApp(ui = ui, server = server)
>>>>>>> b4ca4bd1b96e28032edf28d6ce45443b82e7b3c3
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
View(test)
=======
>>>>>>> b4ca4bd1b96e28032edf28d6ce45443b82e7b3c3
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
shiny::runApp()
>>>>>>> b4ca4bd1b96e28032edf28d6ce45443b82e7b3c3
runApp()
runApp()
shiny::runApp()
runApp()
data <- read.csv("USGSPWDBv2.3n.csv")
runApp()
runApp()
library(shiny)
library(devtools)
library(ggplot2)
library(dplyr)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("USGSPWDBv2.3n.csv")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
View(data)
shiny::runApp()
shiny::runApp()
View(data)
geo_data <- data[['LATITUDE', 'LONGITUDE', 'TDS']]
geo_data <- datA['LATITUDE', 'LONGITUDE', 'TDS']
geo_data <- data['LATITUDE', 'LONGITUDE', 'TDS']
geo_data <- subset(data, c = ('LATITUDE', 'LONGITUDE', 'TDS'))
geo_data <- data %>% select(LATITUDE, LONGITUDE, TDS)
View(geo_data)
geo_data <- complete.cases(geo_data)
geo_data <- data %>% select(LATITUDE, LONGITUDE, TDS)
geo_data <- na.omit(geo_data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv("USGSPWDBv2.3n.csv")
data <- read.csv("USGSPWDBv2.3n.csv")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read.csv("USGSPWDBv2.3n.csv")
shiny::runApp()
runApp()
runApp()
data <- read.csv("USGSPWDBv2.3n.csv")
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("shinytheme")
runApp()
libary("shinythemes")
library("shinythemes")
runApp()
