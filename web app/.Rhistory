shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
#This is the user interface layout
ui <- fluidPage(
#A selector bar to browse through themes
shinythemes::themeSelector(),
titlePanel("Water Quality"),
sidebarLayout(
side, main)
)
#Output functions
server <- function(input, output) {
output$basin_label <- renderText({
input$select_basin
})
output$query_label <- renderText ({
input$select_query
})
#Reactive function to dynamically update years and pass to the filter
slider_years <- reactive({
seq(input[['my_dates']][1],
input[['my_dates']][2])
})
#Create a plot based on user inputs
output[['basin_table']] <- renderPrint({
req(input$select_basin)
#Format the date column as a date object and extract year only
data$DATESAMPLE <- format(as.Date(data$DATESAMPLE, '%Y-%m-%d'), '%Y')
#Create a subset of the data based on user selections
filtered <-
data %>%
filter(BASIN ==input[['select_basin']]) %>%
filter(DATESAMPLE %in% slider_years())
filtered <-
subset(filtered,
BASIN == input[['select_basin']],
c("BASIN", input[['select_query']], "DATESAMPLE"
))
#Eliminate rows with null values from the data
filtered <- filtered[complete.cases(filtered),]
filtered <- filtered[order(filtered$DATESAMPLE),]
#Create a list for the aggregate function
date_list <- list(filtered$DATESAMPLE)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = avg, by = date_list)
names(filtered)[2] <- 'y_value'
ggplot(data = filtered, aes(x = Group.1, y = y_value)) + geom_col(fill = '#0066CC') + xlab("Year") + ylab("TDS")
})
}
source('~/.active-rstudio-document')
#Output functions
server <- function(input, output) {
output$basin_label <- renderText({
input$select_basin
})
output$query_label <- renderText ({
input$select_query
})
#Reactive function to dynamically update years and pass to the filter
slider_years <- reactive({
seq(input[['my_dates']][1],
input[['my_dates']][2])
})
#Create a plot based on user inputs
output[['basin_table']] <- renderPrint({
req(input$select_basin)
#Format the date column as a date object and extract year only
data$DATESAMPLE <- format(as.Date(data$DATESAMPLE, '%Y-%m-%d'), '%Y')
#Create a subset of the data based on user selections
filtered <-
data %>%
filter(BASIN ==input[['select_basin']]) %>%
filter(DATESAMPLE %in% slider_years())
filtered <-
subset(filtered,
BASIN == input[['select_basin']],
c("BASIN", input[['select_query']], "DATESAMPLE"
))
#Eliminate rows with null values from the data
filtered <- filtered[complete.cases(filtered),]
filtered <- filtered[order(filtered$DATESAMPLE),]
#Create a list for the aggregate function
date_list <- list(filtered$DATESAMPLE)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = avg, by = date_list)
names(filtered)[2] <- 'y_value'
ggplot(data = filtered, aes(x = Group.1, y = y_value)) + geom_col(fill = '#0066CC') + xlab("Year") + ylab("TDS")
})
}
#Starts the application
shinyApp(ui = ui, server = server)
#Aggregate by year
filtered <- aggregate(filtered[input[['select_query']]], FUN = sum, by = date_list)
names(filtered)[2] <- 'y_value'
runApp()
shinyApp(ui = ui, server = server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
output$hist <- renderPlot({ hist(rv$data)
}) }
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
